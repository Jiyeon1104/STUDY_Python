https://www.djangoproject.com/

잔고는 웹 앱을 만들어주는 웹 프레임워크

장고는 보안 기능이 강력함
여러 다양한 기능들이 기본적으로 제공됨
장고는 쉽고 재미있음

#1. 파이썬 가상 환경 설정 
파이썬 프로젝트를 진행할 때 독립된 환경을 만들어줌
예를 들면, 2개 또는 3개의 프로젝트를 개발하고 관할 때 각각 독립적인 환경에서 프로젝트들을 진행해야 할 경우가 있음

#2. 가상환경에 Django 설치

#3. 장고 프로젝트 생성
장고의 프로젝트 개념은 하나의 사이트라고 보면 됨
장고 프로젝트를 생성하면 한 개의 웹 사이트를 생성하는 것임
하나의 프로젝트 안에는 여러 개의 앱을 만들게 됨
장고에서의 앱은 사이트를 구성하는 특정 기능이 구현된 작업 단위를 의미함

# django 한글화 (지역화)

config - settings.py

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

이렇게 바꿔주기

# python manage.py migrate를 실행하여 장고가 기본적으로 설치한 여러가지 앱들을 적용(활성화)하자
실행한 후에는 앱들 사용에 필요한 설정과 테이블들이 생성되어 사용 가능한 상태로 만들어짐

# 앱 App 
프로젝트(사이트)에 기능(앱)을 추가해야 어떤 작업을 수행할 수 있음
게시판기능, 회원관리 기능

게시판 기능을 추가해보자!!
(mysite) C:\projects\mysite>

cmd -> django-admin startapp pybo

브라우저에서 특정 주소로 접근하면
http://127.0.0.1:8000/pybo/

config 폴더의 urls.py 파일에서 요청된 /pybo와 매핑된 views.py 파일의 index 함수를 호출한 결과를 브라우저에 보여줌

# URL 분리
pybo 앱에 관련된 것들은 모두 pybo디렉토리 아래에 위치시키는 것이 바람직함

# 모델
장고는 모델 model을 이용하여 기본적인 데이터베이스를 처리함
보통은 데이터베이스에 저장하고 조회할 때 SQL을 이용해야 하지만 장고는 SQL없이도 데이터를 쉽게 처리할 수 있게 해줌

class Question(models.Model) :
    subject = models.CharField(max_length = 200)
    content = models.TextField()
    create_date = models.DateTimeField()

class Answer(models.Model):
    subject = models.ForeignKey(Question, on_delete=models.CASCADE)
    content = models.TextField()
    create_date = models.DateTimeField()

Answer 모델 질문에 대한 답. 기존 모델 속성과 연결하기 위해 ForeignKey 를 사용하여 Question 모델과 연결함
on_delete=models.CASCADE의 의미는 Question이 삭제될 경우 Answer도 함께 삭제하라 라는 의미

게시판 게시물을 저장할 테이블을 생성을위해 앱을 등록함

C:\project\mystie\config\settings.py

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    ]


c:\project\mysite\pybo\apps.py 파일에 이름이 잘 등록되어 있는지만 확인 (별 문제 없음)

from django.apps import AppConfig

class PyboConfig(AppConfig):
    name = 'pybo'

# 관리자 설정 (슈퍼유저)
python manage.py migrate
admin
admin@mysite.com
0000

http://127.0.0.1:8000/admin/

모델을 관리자 페이지에 등록

# 화면 출력을 위한 질문 목록 만들기

# from django.http import HttpResponse

# Create your views here.
from pybo.models import Question
from django.shortcuts import render
from .models import Question


def index(request):
    '''
    게시판 목록 출력
    '''
    question_list = Question.objects.order_by('-create_date')
    context = {'question_list' : question_list}
    return render(request, 'pybo/question_list.html', context)

    # 질문 목록 데이터들은 Question.objects.order_by('-create_date')
    # 로 얻어 옴. order_by는 조회 결과를 정렬하는 함수임 -는 역순 (게시물은 보통 최신순으로 보기 때문에)

# 템플릿 디렉토리 설정

[config - settings.py]
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],

# 화면에 띄우는 html 등의 파일 위치 설정

def detail(request, question_id):
    '''
    게시판 내용 출력
    '''
    question = Question.objects.get(id = question_id)
    context = {'question' : question}
    return render(request, 'pybo/question_detail.html', context)

# 화면 꾸미기
bootstrap
구글 창에서 bootstrap min css 검색 download v5.0

아래 내용 카피
CDN via jsDelivr에 있음

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>